// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: accounts.sql

package db

import (
	"context"
)

const addAccountBalance = `-- name: AddAccountBalance :one
UPDATE "accounts"
SET "balance" = "balance" + $1
WHERE "account_number" = $2
RETURNING id, account_number, owner, balance, currency, created_at
`

type AddAccountBalanceParams struct {
	Amount        int64 `json:"amount"`
	AccountNumber int64 `json:"accountNumber"`
}

func (q *Queries) AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Account, error) {
	row := q.queryRow(ctx, q.addAccountBalanceStmt, addAccountBalance, arg.Amount, arg.AccountNumber)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountNumber,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const createAccounts = `-- name: CreateAccounts :one
INSERT INTO "accounts" (
  "owner",
  "balance",
  "currency"
) VALUES (
  $1, $2, $3
)
RETURNING id, account_number, owner, balance, currency, created_at
`

type CreateAccountsParams struct {
	Owner    string `json:"owner"`
	Balance  int64  `json:"balance"`
	Currency string `json:"currency"`
}

func (q *Queries) CreateAccounts(ctx context.Context, arg CreateAccountsParams) (Account, error) {
	row := q.queryRow(ctx, q.createAccountsStmt, createAccounts, arg.Owner, arg.Balance, arg.Currency)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountNumber,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM "accounts"
WHERE "account_number" = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, accountNumber int64) error {
	_, err := q.exec(ctx, q.deleteAccountStmt, deleteAccount, accountNumber)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, account_number, owner, balance, currency, created_at FROM "accounts"
WHERE "account_number" = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, accountNumber int64) (Account, error) {
	row := q.queryRow(ctx, q.getAccountStmt, getAccount, accountNumber)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountNumber,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountforupdate = `-- name: GetAccountforupdate :one
SELECT id, account_number, owner, balance, currency, created_at FROM "accounts"
WHERE "account_number" = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetAccountforupdate(ctx context.Context, accountNumber int64) (Account, error) {
	row := q.queryRow(ctx, q.getAccountforupdateStmt, getAccountforupdate, accountNumber)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountNumber,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, account_number, owner, balance, currency, created_at FROM "accounts"
WHERE "owner" = $1
ORDER BY "account_number"
LIMIT $2
OFFSET $3
`

type ListAccountsParams struct {
	Owner  string `json:"owner"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.query(ctx, q.listAccountsStmt, listAccounts, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.AccountNumber,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE "accounts"
SET "balance" = $2
WHERE "account_number" = $1
RETURNING id, account_number, owner, balance, currency, created_at
`

type UpdateAccountParams struct {
	AccountNumber int64 `json:"accountNumber"`
	Balance       int64 `json:"balance"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.queryRow(ctx, q.updateAccountStmt, updateAccount, arg.AccountNumber, arg.Balance)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountNumber,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
