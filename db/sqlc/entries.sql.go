// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: entries.sql

package db

import (
	"context"
)

const createEntries = `-- name: CreateEntries :one
INSERT INTO "entries" (
  "account_number",
  "amount"
) VALUES (
  $1, $2
)
RETURNING id, account_number, amount, created_at
`

type CreateEntriesParams struct {
	AccountNumber int64 `json:"accountNumber"`
	Amount        int64 `json:"amount"`
}

func (q *Queries) CreateEntries(ctx context.Context, arg CreateEntriesParams) (Entry, error) {
	row := q.queryRow(ctx, q.createEntriesStmt, createEntries, arg.AccountNumber, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountNumber,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getEntries = `-- name: GetEntries :one
SELECT id, account_number, amount, created_at FROM "entries"
WHERE "account_number" = $1 LIMIT 1
`

func (q *Queries) GetEntries(ctx context.Context, accountNumber int64) (Entry, error) {
	row := q.queryRow(ctx, q.getEntriesStmt, getEntries, accountNumber)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountNumber,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id, account_number, amount, created_at FROM "entries"
WHERE "account_number" = $1
ORDER BY "id"
LIMIT $2
OFFSET $3
`

type ListEntriesParams struct {
	AccountNumber int64 `json:"accountNumber"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error) {
	rows, err := q.query(ctx, q.listEntriesStmt, listEntries, arg.AccountNumber, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountNumber,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
